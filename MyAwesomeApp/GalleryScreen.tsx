import React, { useState, useCallback } from 'react';
import { View, Text, StyleSheet, FlatList, Image, Button, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useFocusEffect } from '@react-navigation/native';
import * as FileSystem from 'expo-file-system/legacy';

// S·ª¨A L·ªñI 1: Import c√°c ki·ªÉu d·ªØ li·ªáu Navigation v√† Note t·ª´ App
import type { NativeStackScreenProps } from '@react-navigation/native-stack';
import type { RootStackParamList, Note } from './App'; 

// S·ª¨A L·ªñI 2: ƒê·ªãnh nghƒ©a ki·ªÉu Props cho m√†n h√¨nh Gallery
type GalleryScreenProps = NativeStackScreenProps<RootStackParamList, 'Gallery'>;

const STORAGE_KEY = '@camera_notes';

export default function GalleryScreen({ navigation }: GalleryScreenProps) { // <<< √Åp d·ª•ng ki·ªÉu ƒë√£ ƒë·ªãnh nghƒ©a
    // Khai b√°o r√µ r√†ng notes l√† m·ªôt m·∫£ng c√°c Note
    const [notes, setNotes] = useState<Note[]>([]);

    // 1. H√†m t·∫£i ghi ch√∫ t·ª´ AsyncStorage
    const loadNotes = async () => {
        try {
        const storedNotes = await AsyncStorage.getItem(STORAGE_KEY);
            if (storedNotes) {
                // ƒê·ªãnh ki·ªÉu cho a v√† b
                const parsedNotes: Note[] = JSON.parse(storedNotes)
                    .sort((a: Note, b: Note) => b.timestamp - a.timestamp); 
                setNotes(parsedNotes);
            } else {
             setNotes([]);
            }
        } catch (error) {
            console.error("L·ªói khi t·∫£i ghi ch√∫: ", error);
        }
    };

    // T·∫£i l·∫°i d·ªØ li·ªáu m·ªói khi m√†n h√¨nh ƒë∆∞·ª£c Focus
    useFocusEffect(
        useCallback(() => {
            loadNotes();
        }, [])
    );
    
    // H√†m x·ª≠ l√Ω khi nh·∫•n S·ª≠a (D√πng navigation prop ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh ki·ªÉu)
    const handleEdit = (noteToEdit: Note) => {
        navigation.navigate('Edit', { note: noteToEdit }); 
    };

    // 2. H√†m x√≥a ghi ch√∫ (M·ªü r·ªông)
    // ƒê·ªãnh ki·ªÉu cho noteToDelete
     const deleteNote = (noteToDelete: Note) => {
        Alert.alert(
            "X√°c nh·∫≠n X√≥a",
            "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ghi ch√∫ n√†y?",
            [
                { text: "H·ªßy", style: "cancel" },
                { 
                    text: "X√≥a", 
                    onPress: async () => {
                        try {
                            // X√≥a file ·∫£nh kh·ªèi h·ªá th·ªëng t·ªáp
                            await FileSystem.deleteAsync(noteToDelete.path, { idempotent: true });

                            // notes ƒë√£ l√† Note[], TypeScript t·ª± suy lu·∫≠n.
                            const newNotes = notes.filter(note => note.path !== noteToDelete.path);
                            await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(newNotes));
                            
                            // C·∫≠p nh·∫≠t State
                            setNotes(newNotes); 
                            alert("ƒê√£ x√≥a th√†nh c√¥ng!");
                        } catch (error) {
                            console.error("L·ªói khi x√≥a ghi ch√∫: ", error);
                            alert("X√≥a th·∫•t b·∫°i!");
                        }
                    },
                    style: "destructive"
                }
            ]
        );
    };

    // 3. Render t·ª´ng item
    // ƒê·ªãnh ki·ªÉu cho item
    const renderItem = ({ item }: { item: Note }) => (
        <View style={styles.noteCard}>
            <Image source={{ uri: item.path }} style={styles.image} />
            <Text style={styles.caption}>{item.caption}</Text>
            <View style={styles.buttonRow}> 
                <Button title="S·ª≠a" onPress={() => handleEdit(item)} color="#f39c12" />
                <Button title="X√≥a" onPress={() => deleteNote(item)} color="#c0392b" />
            </View>
        </View>
    );

    return (
        <View style={styles.container}>
            {notes.length === 0 ? (
                <View style={styles.emptyContainer}>
                    <Text style={styles.emptyText}>üñºÔ∏è Gallery tr·ªëng.</Text>
                    <Text style={styles.emptyText}>H√£y quay l·∫°i m√†n h√¨nh Camera ƒë·ªÉ ch·ª•p ·∫£nh v√† ghi ch√∫!</Text>
                </View>
            ) : (
                <FlatList
                    data={notes}
                    renderItem={renderItem}
                    keyExtractor={item => item.path}
                    contentContainerStyle={styles.listContent}
                />
            )}
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        paddingTop: 10,
        backgroundColor: '#f5f5f5',
    },
    listContent: {
        paddingHorizontal: 10,
    },
    noteCard: {
        backgroundColor: '#fff',
        borderRadius: 8,
        marginBottom: 15,
        padding: 10,
        alignItems: 'center',
        elevation: 3, 
        shadowColor: '#000', 
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
    },
    image: {
        width: '100%',
        height: 200,
        borderRadius: 6,
        marginBottom: 10,
        resizeMode: 'cover',
    },
    caption: {
        fontSize: 16,
        marginBottom: 10,
        textAlign: 'center',
    },
    emptyContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    emptyText: {
        fontSize: 18,
        color: '#7f8c8d',
        textAlign: 'center',
    },
    buttonRow: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        width: '100%',
        marginTop: 5,
    }
});